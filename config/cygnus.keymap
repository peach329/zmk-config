/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
};

&sk {
    release-after-ms = <2000>;
    quick-release;
};

/ {
    combos {
        compatible = "zmk,combos";

        left_bkt {
            bindings = <&kp LBKT>;
            key-positions = <3 2>;
            timeout-ms = <50>;
        };

        right_bkt {
            bindings = <&kp RBKT>;
            key-positions = <6 7>;
            timeout-ms = <50>;
        };

        left_par {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <12 13>;
            timeout-ms = <50>;
        };

        right_par {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <16 17>;
            timeout-ms = <50>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <23 22>;
            timeout-ms = <50>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <26 27>;
            timeout-ms = <50>;
        };

        bac {
            bindings = <&kp BACKSLASH>;
            key-positions = <4 5>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <14 15>;
        };
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <180>;
            global-quick-tap;
        };

        ltq: ltq {
            compatible = "zmk,behavior-hold-tap";
            label = "LTQ";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "hold-preferred";
            bindings = <&mo>, <&kp>;

            quick-tap-ms = <180>;
            global-quick-tap;
        };

        as: as {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <135>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD0";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPSLOCK>;
        };

        mth: mth {
            compatible = "zmk,behavior-hold-tap";
            label = "MTH";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "hold-preferred";
        };

        td1: td1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD1";
            #binding-cells = <0>;
            bindings = <&lt 3 ENTER>, <&to 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB                  &kp Q  &kp W  &kp E     &kp R      &kp T          &kp Y      &kp U         &kp I         &kp O    &mt PRINTSCREEN P  &kp BSLH
&mt LEFT_CONTROL ESCAPE  &kp A  &kp S  &kp D     &kp F      &kp G          &kp H      &kp J         &kp K         &kp L    &kp A              &kp SQT
&td0                     &kp Z  &kp X  &kp C     &kp V      &kp B          &kp N      &mt C_MUTE M  &kp COMMA     &kp DOT  &kp FSLH           &mth LEFT_SHIFT ENTER
                                       &kp LGUI  &lt 2 DEL  &kp BACKSPACE  &kp SPACE  &lt 1 ENTER   &kp LEFT_ALT
            >;
        };

        num {
            bindings = <
&kp GRAVE  &kp ASTERISK  &kp N7        &kp N8           &kp N9        &kp PLUS   &trans         &trans                       &trans              &trans                      &trans     &trans
&trans     &kp SLASH     &kp NUMBER_4  &kp N5           &kp NUMBER_6  &kp MINUS  &trans         &mt LEFT_SHIFT LEFT_BRACKET  &mt LEFT_GUI COMMA  &mt LEFT_ALT RIGHT_BRACKET  &kp LCTRL  &trans
&trans     &kp PERIOD    &kp NUMBER_1  &kp NUMBER_2     &kp NUMBER_3  &kp EQUAL  &mt RA(F4) F4  &kp LEFT_PARENTHESIS         &trans              &kp RIGHT_PARENTHESIS       &trans     &trans
                                       &mt LEFT_GUI N0  &kp DELETE    &trans     &trans         &trans                       &trans
            >;
        };

        nav {
            bindings = <
&trans  &trans     &trans        &trans        &trans          &trans  &kp LS(LG(Z))  &kp LG(V)  &kp LG(C)      &kp LG(X)     &kp LG(Z)  &trans
&trans  &kp LCTRL  &kp LEFT_ALT  &kp LEFT_GUI  &kp LEFT_SHIFT  &trans  &trans         &kp LEFT   &kp DOWN       &kp UP_ARROW  &kp RIGHT  &trans
&trans  &kp LEFT   &kp DOWN      &kp UP        &kp RIGHT       &trans  &trans         &kp HOME   &kp PAGE_DOWN  &kp PAGE_UP   &kp END    &trans
                                 &trans        &trans          &trans  &trans         &td1       &trans
            >;
        };

        media {
            bindings = <
&trans  &trans        &kp F7  &kp F8  &kp F9  &trans  &trans          &trans                   &trans               &trans                     &trans                    &bt BT_CLR_ALL
&to 0   &out OUT_TOG  &kp F4  &kp F5  &kp F6  &trans  &kp C_PREVIOUS  &mt LEFT_SHIFT C_REWIND  &mt LEFT_GUI C_STOP  &mt LEFT_ALT C_PLAY_PAUSE  &mt LCTRL C_FAST_FORWARD  &kp C_NEXT
&trans  &trans        &kp F1  &kp F2  &kp F3  &trans  &trans          &kp C_MUTE               &kp C_VOLUME_DOWN    &kp C_VOLUME_UP            &bt BT_SEL 0              &bt BT_SEL 1
                              &trans  &trans  &trans  &trans          &trans                   &trans
            >;
        };
    };
};
